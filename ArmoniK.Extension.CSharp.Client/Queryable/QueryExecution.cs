// This file is part of the ArmoniK project
// 
// Copyright (C) ANEO, 2021-2025. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace ArmoniK.Extension.CSharp.Client.Queryable;

internal abstract class QueryExecution<TPagination, TPage, TSource, TEnumField, TFilterOr, TFilterAnd, TFilterField>
  where TFilterOr : new()
  where TFilterAnd : new()
{
  private QueryExpressionTreeVisitor<TSource, TEnumField, TFilterOr, TFilterAnd, TFilterField> visitor_;

  public Func<IAsyncEnumerable<TSource>, TSource?>? FuncReturnNullableTSource
    => visitor_.FuncReturnNullableTSource;

  public Func<IAsyncEnumerable<TSource>, TSource>? FuncReturnTSource
    => visitor_.FuncReturnTSource;

  /// <summary>
  ///   The pagination properties generated by the latest filter execution
  /// </summary>
  public TPagination PaginationInstance { get; private set; }

  public void VisitExpression(Expression expression)
  {
    try
    {
      visitor_ = CreateQueryExpressionTreeVisitor();
      visitor_.VisitTree(expression);
    }
    catch (Exception ex)
    {
      LogError(ex,
               "Invalid query: " + expression);
      throw new InvalidExpressionException("Invalid query: " + expression,
                                           ex);
    }
  }

  public async IAsyncEnumerable<TSource> ExecuteAsync([EnumeratorCancellation] CancellationToken cancellationToken = default)
  {
    if (visitor_ == null)
    {
      throw new InvalidOperationException("VisitExpression() must be called before ExecuteAsync()");
    }

    PaginationInstance = CreatePaginationInstance(visitor_.Filters,
                                                  visitor_.SortCriteria,
                                                  visitor_.IsSortAscending);
    var   total = 0;
    TPage page;
    do
    {
      page = await RequestInstances(PaginationInstance,
                                    cancellationToken)
               .ConfigureAwait(false);
      var elements = GetPageElements(page);
      foreach (var blobState in elements)
      {
        total++;
        yield return blobState;
      }
    } while (total < GetTotalPageElements(page));
  }

  protected abstract void LogError(Exception ex,
                                   string    message);

  protected abstract Task<TPage> RequestInstances(TPagination       pagination,
                                                  CancellationToken cancellationToken);

  protected abstract QueryExpressionTreeVisitor<TSource, TEnumField, TFilterOr, TFilterAnd, TFilterField> CreateQueryExpressionTreeVisitor();

  protected abstract TPagination CreatePaginationInstance(TFilterOr  filter,
                                                          TEnumField sortCriteria,
                                                          bool       isAscending);

  protected abstract int                  GetTotalPageElements(TPage page);
  protected abstract IEnumerable<TSource> GetPageElements(TPage      page);
}
